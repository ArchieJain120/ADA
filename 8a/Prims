#include <stdio.h>

#define INF 999

int main() {
    int n, i, j, min, u, v;
    int cost[10][10], visited[10], parent[10], dist[10];
    int totalCost = 0;

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("Enter cost adjacency matrix (use 999 for no edge):\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &cost[i][j]);

    // Initialize
    for (i = 0; i < n; i++) {
        dist[i] = cost[0][i];
        parent[i] = 0;
        visited[i] = 0;
    }

    visited[0] = 1;  // Start from vertex 0

    for (i = 1; i < n; i++) {
        min = INF;
        u = -1;

        // Find the unvisited vertex with the smallest edge weight
        for (j = 0; j < n; j++) {
            if (!visited[j] && dist[j] < min) {
                min = dist[j];
                u = j;
            }
        }

        if (u == -1) break;  // Graph is disconnected

        visited[u] = 1;
        totalCost += dist[u];
        printf("Edge selected: (%d, %d) cost = %d\n", parent[u], u, dist[u]);

        // Update distance of adjacent vertices
        for (v = 0; v < n; v++) {
            if (!visited[v] && cost[u][v] < dist[v]) {
                dist[v] = cost[u][v];
                parent[v] = u;
            }
        }
    }

    printf("Total cost of Minimum Spanning Tree: %d\n", totalCost);
    return 0;
}
