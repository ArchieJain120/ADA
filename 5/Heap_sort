#include <stdio.h>
#include <time.h>

#define MAX 1000

int a[MAX];
int n;

void heapify(int a[], int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && a[left] > a[largest])
        largest = left;
    if (right < n && a[right] > a[largest])
        largest = right;

    if (largest != i) {
        int temp = a[i];
        a[i] = a[largest];
        a[largest] = temp;

        heapify(a, n, largest);
    }
}

void heapSort(int a[], int n) {
    // Build max heap
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(a, n, i);

    // Extract elements from heap one by one
    for (int i = n - 1; i >= 1; i--) {
        // Swap current root with end element
        int temp = a[0];
        a[0] = a[i];
        a[i] = temp;

        // Heapify root element again
        heapify(a, i, 0);
    }
}

int main() {
    clock_t start, end;
    double time_taken;

    printf("Enter number of elements: ");
    scanf("%d", &n);

    if (n > MAX) {
        printf("Error: Maximum number of elements is %d.\n", MAX);
        return 1;
    }

    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++)
        scanf("%d", &a[i]);

    start = clock();
    heapSort(a, n);
    end = clock();

    time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;

    printf("Sorted array:\n");
    for (int i = 0; i < n; i++)
        printf("%d ", a[i]);
    printf("\n");

    printf("Time taken to sort using Heap Sort: %f seconds\n", time_taken);

    return 0;
}
