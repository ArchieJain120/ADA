#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

bool isSafe(int** board, int row, int col, int N) {
    int i, j;

    // Check left side of the current row
    for (i = 0; i < col; i++)
        if (board[row][i])
            return false;

    // Check upper diagonal on left side
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j])
            return false;

    // Check lower diagonal on left side
    for (i = row, j = col; j >= 0 && i < N; i++, j--)
        if (board[i][j])
            return false;

    return true;
}

void printBoard(int** board, int N) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            printf("%s ", board[i][j] ? "Q" : ".");
        printf("\n");
    }
    printf("\n");
}

void solveNQueensAll(int** board, int col, int N, int* solutionCount) {
    if (col == N) {
        (*solutionCount)++;
        printf("Solution %d:\n", *solutionCount);
        printBoard(board, N);
        return;
    }

    for (int i = 0; i < N; i++) {
        if (isSafe(board, i, col, N)) {
            board[i][col] = 1;
            solveNQueensAll(board, col + 1, N, solutionCount);
            board[i][col] = 0;  // Backtrack
        }
    }
}

int main() {
    int N;
    printf("Enter the number of queens: ");
    scanf("%d", &N);

    // Dynamically allocate NxN board
    int** board = (int**)malloc(N * sizeof(int*));
    for (int i = 0; i < N; i++) {
        board[i] = (int*)calloc(N, sizeof(int));
    }

    int solutionCount = 0;
    solveNQueensAll(board, 0, N, &solutionCount);

    if (solutionCount == 0)
        printf("No solutions found for %d-Queens.\n", N);
    else
        printf("Total solutions found: %d\n", solutionCount);

    // Free allocated memory
    for (int i = 0; i < N; i++)
        free(board[i]);
    free(board);

    return 0;
}
