#include <stdio.h>
#define MAX 10
#define INF 999

int cost[MAX][MAX], n, result[MAX][2], weight[MAX];

void dijkstras(int cost[][MAX], int s);

int main() {
    int i, j, s;

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    if (n > MAX) {
        printf("Maximum supported vertices is %d.\n", MAX);
        return 1;
    }

    printf("Enter the cost adjacency matrix (use 999 for no edge):\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &cost[i][j]);

    printf("Enter the source vertex: ");
    scanf("%d", &s);

    dijkstras(cost, s);

    printf("\nShortest paths from source vertex %d:\n", s);
    for (i = 0; i < n; i++) {
        if (i != s)
            printf("(%d -> %d) with weight %d\n", result[i][0], result[i][1], weight[i]);
    }

    return 0;
}

void dijkstras(int cost[][MAX], int s) {
    int d[MAX], visited[MAX], p[MAX];
    int i, j, u, v, min;

    for (i = 0; i < n; i++) {
        d[i] = INF;
        visited[i] = 0;
        p[i] = s;
    }

    d[s] = 0;

    for (i = 0; i < n - 1; i++) {
        min = INF;
        u = -1;

        // Find unvisited vertex with smallest distance
        for (j = 0; j < n; j++) {
            if (!visited[j] && d[j] < min) {
                min = d[j];
                u = j;
            }
        }

        if (u == -1)
            break;

        visited[u] = 1;

        // Update distances
        for (v = 0; v < n; v++) {
            if (!visited[v] && cost[u][v] != INF && d[u] + cost[u][v] < d[v]) {
                d[v] = d[u] + cost[u][v];
                p[v] = u;
            }
        }
    }

    // Store the result
    for (i = 0; i < n; i++) {
        result[i][0] = p[i];
        result[i][1] = i;
        weight[i] = d[i];
    }
}
